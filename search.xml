<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>android安装目录app_libs导致的so加载失败</title>
    <url>/2016/09/14/android-app-libs/</url>
    <content><![CDATA[<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>最近要把公司的android 播放器sdk包装成RN组件，播放器是个很重的组件，但是从RN的理论上讲又是行得通的，所以，那就在我的样板工程中来尝试吧。</p>
<p>建立一个react-native模块之后，也写了相对应的Component，运行加载一切顺利，但是再次运行，crash，报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.UnsatisfiedLinkError: dalvik.system.DexClassLoader[exPathList[[zip file</span><br><span class="line"> <span class="string">&quot;/data/data/com.***.rnapp/files/sinaplugin/PlayerSDKCore_V3.2.apk&quot;</span>],</span><br><span class="line"> nativeLibraryDirectories=[/data/data/com.***.rnapp/app_libs, /vendor/lib, /system/lib]]]</span><br><span class="line">  couldn<span class="string">&#x27;t find &quot;libsinit.so&quot;</span></span><br></pre></td></tr></table></figure>




<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>从log中看发现是没有成功加载so文件，这个不应该啊，迅速定位一下。</p>
<p>我们的播放器是按插件的方式开发的，用的是<a href="https://github.com/singwhatiwanna/dynamic-load-apk">dynamic-load-apk</a><br>来动态加载所需要的播放内核，以便将来动态升级，结果去 so存放目录下看，确实没有发现 libsinit.so 文件，说明确实有问题，经过在模拟器调试发现</p>
<p>在第一次从asset目录copy出需要的apk后，load所需的so是成功的，并且断点后发现，确实app_libs目录是有的，</p>


<p>但是当RN模块加载之后，app_libs 目录竟然被干掉了，到此已经找到原因，说明RN代码里面做了一些处理，<br>也使用了app_libs目录，</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>尝试使用加前缀目录, 更改目录结构 app_libs &#x3D;&gt; app_sinalibs 再次尝试，一切正常 。。。。</p>
]]></content>
      <categories>
        <category>坑</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>rn</tag>
        <tag>so</tag>
      </tags>
  </entry>
  <entry>
    <title>bash shell 环境</title>
    <url>/2017/01/18/bash-env/</url>
    <content><![CDATA[<h3 id="bash的环境配置"><a href="#bash的环境配置" class="headerlink" title="bash的环境配置"></a>bash的环境配置</h3><p>工作环境是在Mac环境下，默认情况下Mac下bash是没有 <code>.bashrc</code> 的，导致一些自动化工具没有正确<br>配置自己的环境变量，最后出现问题。</p>
<h3 id="bash的这些配置文件作用"><a href="#bash的这些配置文件作用" class="headerlink" title="bash的这些配置文件作用"></a>bash的这些配置文件作用</h3><ul>
<li><p>.bash_profile</p>
<p> 从字面理解 <code>profile</code> 跟账号相关，它在用户每次登录系统时被读取，里面的所有命令都会被bash执行。<br> 在其他shell里面，存在 <code>.profile</code> 和 <code>.login</code>，这些都是和 <code>.bash_profile</code>作用是一样的。</p>
</li>
<li><p>.bashrc</p>
<p>  从字面理解 <code>rc</code> 跟配置项相关，每个bash启动（进程）时候，会去读该文件。一般来说都会	在.bash_profile里调用<code>.bashrc</code> 脚本以便统一配置用户环境。</p>
</li>
<li><p>.bash_logout</p>
<p>  就更好理解了，在退出shell时被读取。所以我们可把一些清理工作的命令放到这文件中。</p>
</li>
</ul>
<p>同时还有一些系统级别的配置项，<code>/etc/bashrc</code> 和 <code>/etc/profile</code>, 当在用户主目录下找不到<code>.bash_profile</code> 和<code>.bashrc</code>时，就会读取这两个文件，在centos下，<code>.bashrc</code> 又会调用 <code>/etc/bashrc</code>。另外 <code>.bash_history</code>是bash shell的历史记录文件</p>
<h3 id="shell的两种交互属性"><a href="#shell的两种交互属性" class="headerlink" title="shell的两种交互属性"></a>shell的两种交互属性</h3><p>一种，是否<code>interactive shell</code>(交互式Shell)，另一种，是否<code>login shell</code>(登录Shell)</p>
<ul>
<li><p>交互式Shell：	没有非选项参数，没有-c，标准输入和标准输出与终端相连的，或者用-i参数启动的Bash实例。可以通过探测PS1变量是否设置或者$-返回值中是否包含字幕i来判定。什么是没有非选项参数？比如bash ~&#x2F;myscript&#x2F;clear_temp_files.sh这样执行的Shell脚本的Bash实例，就不是交互式Shell，因为脚本的路径，就是非选项参数。-c又是干什么的？就是使用一个字符串作为Bash的传入参数，比如bash -c ‘ls -ahl’，这种Shell进程也不算是交互式Shell。</p>
<p>  交互式非登录Shell文件加载顺序如下：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/bashrc</span><br><span class="line">~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>登录Shell：	第0个参数以-号开头的Bash实例，或者用-login参数启动的Bash Shell。更加诡异了，什么叫第0个参数以-号开头？你只要随便登录一个*nix系统，Mac也行，Linux也行，然后echo $0，你就明白了，惊讶吧，出来的值竟然是-bash。真的是以-号开头的！！</p>
<p>  登录Shell(不管是不是交互式的)文件加载顺序如下:</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_login</span><br><span class="line">~/.profile</span><br></pre></td></tr></table></figure></li>
</ul>
<p>一个crontab脚本，没经过处理的话，既不是交互式Shell，也不是登录Shell，所以所有配置都不会执行。<br>怎么处理？比如可以把shabang改一下 <code>#!/bin/bash -l</code>让脚本用登录Shell来解释执行，就可以加载<code>/etc/profile</code>或者，调用Bash解释器，加<code>-l</code>参数也可以。</p>
<p>上面的信息也就说明了，为什么在Mac下没有执行 <code>.bashrc</code> 的原因了，因为它是交互shell</p>
<h3 id="shell的set和shopt命令设置"><a href="#shell的set和shopt命令设置" class="headerlink" title="shell的set和shopt命令设置"></a>shell的set和shopt命令设置</h3><p>set命令可以用来定制shell环境，使用选项“o”来打开或者关闭选项。例如打开选项：<code>set -o</code> 选项，关闭选项目：<code>set +o</code> 选项。</p>
<p>内置set命令选项</p>
<table>
<thead>
<tr>
<th>选项名</th>
<th>快捷开关</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>allexport</td>
<td>-a</td>
<td>从这个选项中被设置开始就自动标明要输出的新变量或修改过的变量，直至选项被复位</td>
</tr>
<tr>
<td>braceexpand</td>
<td>-B</td>
<td>打开花括号扩展，它是一个默认设置</td>
</tr>
<tr>
<td>emacs</td>
<td></td>
<td>使用emacs内置编辑器进行命令行编辑，是一个默认设置</td>
</tr>
<tr>
<td>errexit</td>
<td>-e</td>
<td>当命令返回一个非零退出状态（失败）时退出。读取初始化文件时不设置</td>
</tr>
<tr>
<td>histexpand</td>
<td>-H</td>
<td>执行历史替换时打开!和!!扩展，是一个默认设置</td>
</tr>
<tr>
<td>history</td>
<td></td>
<td>打开命令行历史、默认为打开</td>
</tr>
<tr>
<td>ignoreeof</td>
<td></td>
<td>禁止用EOF(Ctrl+D)键退出shell。必须键入exit才能退出。等价于设置shell变量IGNOREEOF&#x3D;10</td>
</tr>
<tr>
<td>keyword</td>
<td>-k</td>
<td>将关键字参数放到命令的环境中</td>
</tr>
<tr>
<td>interactive-comments</td>
<td></td>
<td>对于交互式shell，把#符后面的文本作为注释</td>
</tr>
<tr>
<td>monitor</td>
<td>-m</td>
<td>设置作业控制</td>
</tr>
<tr>
<td>noclobber</td>
<td>-C</td>
<td>防止文件在重定向时被重写</td>
</tr>
<tr>
<td>noexec</td>
<td>-n</td>
<td>读命令，但不执行。用来检查脚本的语法。交互式运行时不开启</td>
</tr>
<tr>
<td>noglob</td>
<td>-d</td>
<td>禁止用路径名扩展。即关闭通配符</td>
</tr>
<tr>
<td>notify</td>
<td>-b</td>
<td>后台作业完成时通知用户</td>
</tr>
<tr>
<td>nounset</td>
<td>-u</td>
<td>扩展一个未设置的变量时显示一个错误信息</td>
</tr>
<tr>
<td>onecmd</td>
<td>-t</td>
<td>在读取和执行命令后退出</td>
</tr>
<tr>
<td>physical</td>
<td>-P</td>
<td>设置时，在键入cd或pwd禁止符号链接。用物理目录代替</td>
</tr>
<tr>
<td>privileged</td>
<td>-p</td>
<td>设置后，shell不读取.profile或ENV文件，且不从环境继承shell函数，将自动为setuid脚本开启特权</td>
</tr>
<tr>
<td>verbose</td>
<td>-v</td>
<td>为调试打开verbose模式</td>
</tr>
<tr>
<td>vi</td>
<td></td>
<td>使用vi内置编辑器进行命令行编辑</td>
</tr>
<tr>
<td>xtrace</td>
<td>-x</td>
<td>为调试打开echo模式</td>
</tr>
</tbody></table>
<p><code>shopt</code>命令是<code>set</code>命令的一种替代，很多方面都和<code>set</code>命令一样，但它增加了很多选项。可有使用<code>-p</code>选项来查看<code>shopt</code>选项的设置。<code>-u</code>开关表示一个复位的选项，<code>-s</code>表示选项当前被设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># shopt -s cdspell   #把cdspell选项打开</span></span><br><span class="line">[root@localhost ~]<span class="comment"># shopt -p cdspell    #打印cdspell设置</span></span><br><span class="line"><span class="built_in">shopt</span> -s cdspell</span><br><span class="line">[root@localhost ~]<span class="comment"># shopt -u cdspell    #恢复cdspell设置</span></span><br></pre></td></tr></table></figure>

<p>shopt命令选项</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>cdable_vars</td>
<td>如果给cd内置命令的参数不是一个目录，就假设它是一个变量名，变量的值是将要转换到的目录</td>
</tr>
<tr>
<td>cdspell</td>
<td>纠正cd命令中目录名的较小拼写错误。检查的错误包括颠倒顺序的字符，遗漏的字符以及重复的字符。如果知道一处修改，正确的路径就打印出，命令将继续。只用于交互式shell</td>
</tr>
<tr>
<td>checkhash</td>
<td>bash在试图执行一个命令前，先在哈希表中寻找，以确定命令是否存在。如果命令不存在，就执行正常路径搜索</td>
</tr>
<tr>
<td>checkwinsize</td>
<td>bash在每个命令后检查窗口大小，如果有必要，就更新LINES和COLUMNS的值</td>
</tr>
<tr>
<td>cmdhist</td>
<td>bash试图将一个多行命令的所有行保存在同一个历史项中。这使得多行命令的重新编辑更方便</td>
</tr>
<tr>
<td>dotglob</td>
<td>bash在文件名扩展的结果中包括以点（.）开头的文件名</td>
</tr>
<tr>
<td>execfail</td>
<td>如果一个交互式shell不能执行指定给exec内置命令作为参数的文件，它不会退出。如果exec失败，一个交互式shell不会退出</td>
</tr>
<tr>
<td>expand_aliases</td>
<td>别名被扩展。默认为打开</td>
</tr>
<tr>
<td>extglob</td>
<td>打开扩展的模式匹配特征（正常的表达式元字符来自Korn shell的文件名扩展）</td>
</tr>
<tr>
<td>histappend</td>
<td>当shell退出时，历史清单将添加到以HISTFILE变量的值命名的文件中，而不是覆盖文件</td>
</tr>
<tr>
<td>histreedit</td>
<td>如果readline正被使用，用户有机会重新编辑一个失败的历史替换</td>
</tr>
<tr>
<td>histverify</td>
<td>如果设置，且readline正被使用，历史替换的结果不会立即传递给shell解析器。而是将结果行装入readline编辑缓冲区中，允许进一步修改</td>
</tr>
<tr>
<td>hostcomplete</td>
<td>如果设置，且readine正被使用，当正在完成一个包含@的词时bash将试图执行主机名补全。默认为打开</td>
</tr>
<tr>
<td>huponexit</td>
<td>如果设置，当一个交互式登陆shell退出时，bash将发送一个SIGHUP（挂起信号）给所有的作业</td>
</tr>
<tr>
<td>interactive_comments</td>
<td>在一个交互式shell中，允许以#开头的词以及同一行中其他的字符被忽略。默认为打开</td>
</tr>
<tr>
<td>lithist</td>
<td>如果打开，且cmdhist选项也打开，多行命令将用嵌入的换行符保存到历史中，而无需在可能的地方用分号来分隔</td>
</tr>
<tr>
<td>mailwarn</td>
<td>如果设置，且bash用来检查邮件的文件自从上次检查后已经被访问，将显示消息“The mail in mailfile has been read”</td>
</tr>
<tr>
<td>nocaseglob</td>
<td>如果设置，当执行文件名扩展时，bash在不区分大小写的方式下匹配文件名</td>
</tr>
<tr>
<td>nullglob</td>
<td>如果设置，bash允许没有匹配任何文件的文件名模式扩展成一个空串，而不是它们本身</td>
</tr>
<tr>
<td>promptvars</td>
<td>如果设置，提示串在被扩展后再经历变量和参量扩展。默认为打开</td>
</tr>
<tr>
<td>restricted_shell</td>
<td>如果shell在受限模式下启动就设置这个选项。该值不能被改变。当执行启动文件时，不能复位该选项，允许启动文件发现shell是否是受限的</td>
</tr>
<tr>
<td>sourcepath</td>
<td>如果设置，source内置命令使用PATH的值来寻找包含作为参数提供的文件的目录。默认为打开</td>
</tr>
<tr>
<td>source</td>
<td>点（.）的同义词</td>
</tr>
<tr>
<td>shift_verbose</td>
<td>如果该选项设置，当移动计数超过位置参量个数时，shift内置命令将打印一个错误消息</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/01/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ios上传打包，遇到的itms，90362，90087 错误</title>
    <url>/2016/09/29/ios-itms-90362-90087/</url>
    <content><![CDATA[<h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><p>最近帮部门内部其他小组利用RN写app，但是对于移动开发的中的，ios和 android工程上的问题，<br>没有移动开发经验还是不行的，所以，工程相关的坑，就让我来趟了。</p>
<p>打包上传，本以为没什么问题，结果出了几个错误</p>



<h3 id="itsm-90087"><a href="#itsm-90087" class="headerlink" title="itsm-90087"></a>itsm-90087</h3><p>提示自建的framework包包含了不支持的架构 x86_64，之前用存静态库（.a）是没有这个问题，<br>查阅相关资料得知，自建framework在打正式包的时候，需要自己做 <code>thin</code> 处理，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lipo Stickies.app/Contents/MacOS/Stickies -thin i386  </span><br><span class="line">-output Stickies.app/Contents/MacOS/Stickies.i386</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例如上段命令，可以从 <code>fat</code> 过的包中，提取出某个架构的包。</p>
<p><a href="http://ikennd.ac/blog/2015/02/stripping-unwanted-architectures-from-dynamic-libraries-in-xcode/">Daniel Kennett</a><br>给出了他的方案，在 <code>Build Phases -&gt; Embed Frameworks</code> 之后加一个 <em>Run Script</em> 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP_PATH=<span class="string">&quot;<span class="variable">$&#123;TARGET_BUILD_DIR&#125;</span>/<span class="variable">$&#123;WRAPPER_NAME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script loops through the frameworks embedded in the application and</span></span><br><span class="line"><span class="comment"># removes unused architectures.</span></span><br><span class="line">find <span class="string">&quot;<span class="variable">$APP_PATH</span>&quot;</span> -name <span class="string">&#x27;*.framework&#x27;</span> -<span class="built_in">type</span> d | <span class="keyword">while</span> <span class="built_in">read</span> -r FRAMEWORK</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">FRAMEWORK_EXECUTABLE_NAME=$(defaults <span class="built_in">read</span> <span class="string">&quot;<span class="variable">$FRAMEWORK</span>/Info.plist&quot;</span> CFBundleExecutable)</span><br><span class="line">FRAMEWORK_EXECUTABLE_PATH=<span class="string">&quot;<span class="variable">$FRAMEWORK</span>/<span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Executable is <span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line">EXTRACTED_ARCHS=()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ARCH <span class="keyword">in</span> <span class="variable">$ARCHS</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Extracting <span class="variable">$ARCH</span> from <span class="variable">$FRAMEWORK_EXECUTABLE_NAME</span>&quot;</span></span><br><span class="line">lipo -extract <span class="string">&quot;<span class="variable">$ARCH</span>&quot;</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>&quot;</span></span><br><span class="line">EXTRACTED_ARCHS+=(<span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-<span class="variable">$ARCH</span>&quot;</span>)</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Merging extracted architectures: <span class="variable">$&#123;ARCHS&#125;</span>&quot;</span></span><br><span class="line">lipo -o <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged&quot;</span> -create <span class="string">&quot;<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$&#123;EXTRACTED_ARCHS[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Replacing original executable with thinned version&quot;</span></span><br><span class="line"><span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>-merged&quot;</span> <span class="string">&quot;<span class="variable">$FRAMEWORK_EXECUTABLE_PATH</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>作用是根据工程声明，做thin处理，替换framework</p>
<h3 id="itsm-90362"><a href="#itsm-90362" class="headerlink" title="itsm-90362"></a>itsm-90362</h3><p>这个itsm提示另一个的framework的info.plist有问题，提示版本号问题，查看一下<br>最小版本是7.0，没有问题啊，实在搞不清楚为什么提示我8.0，我的app版本是8.0<br>framework版本是7.0 没有任何问题啊，</p>
<p>原来是自建framework最小要求ios8.0的原因，把该framework改成8.0，问题解除</p>
<h3 id="access-privacy-sensitive"><a href="#access-privacy-sensitive" class="headerlink" title="access privacy-sensitive"></a>access privacy-sensitive</h3><p>终于通过提交，结果收到苹果一封信</p>
<blockquote>
<p>This app attempts to access privacy-sensitive data without a usage description.<br>The app’s Info.plist must contain an NSCameraUsageDescription key with a string<br>value explaining to the user how the app uses this data.</p>
</blockquote>
<p>感情是我用到了相机，但是没有申请访问该权限的说明,好吧，在info.plist 里面加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>支付安全考虑<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>坑</category>
      </categories>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
</search>
